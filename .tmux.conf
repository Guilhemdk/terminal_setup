
set-hook -g session-created 'run-shell ~/.tmux-layout.sh'


bind -n C-h if-shell "test -z \"$(tmux display-message -p '#{pane_current_command}' | grep vim)\"" "select-pane -L" "send-keys C-h"
bind -n C-j if-shell "test -z \"$(tmux display-message -p '#{pane_current_command}' | grep vim)\"" "select-pane -D" "send-keys C-j"
bind -n C-k if-shell "test -z \"$(tmux display-message -p '#{pane_current_command}' | grep vim)\"" "select-pane -U" "send-keys C-k"
bind -n C-l if-shell "test -z \"$(tmux display-message -p '#{pane_current_command}' | grep vim)\"" "select-pane -R" "send-keys C-l"
bind-key -n C-Space select-pane -l
bind-key -n C-e select-layout even-horizontal

# Open new pannel
bind-key -n C-s if-shell "test -z \"$(tmux list-panes -F '#{pane_current_command}' | grep vim)\"" "split-window -v -c '#{pane_current_path}'" "send-keys C-s"
bind-key -n C-n if-shell "test -z \"$(tmux list-panes -F '#{pane_current_command}' | grep vim)\"" "split-window -h -c '#{pane_current_path}'" "send-keys C-n"

# Bind Ctrl + q to close the tmux pane or window, but pass to Vim if active
bind-key -n C-q if-shell "test -z \"$(tmux list-panes -F '#{pane_current_command}' | grep vim)\"" "kill-pane" "send-keys C-q"

# Ensure focus remains on the correct window when splitting
setw -g focus-events on
set -g repeat-time 100
set -g default-terminal "screen-256color"
set -ga terminal-overrides ",xterm-256color:Tc"
set -g mouse on

# Resize tmux panes only if not inside Vim

# Use Ctrl-i + h/j/k/l to resize panes in tmux
bind -n M-h resize-pane -L 2
bind -n M-j resize-pane -D 2
bind -n M-k resize-pane -U 2
bind -n M-l resize-pane -R 2

